/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package combinatorialoptimization;

import edu.uci.ics.jung.algorithms.layout.CircleLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.graph.SparseMultigraph;
import edu.uci.ics.jung.graph.util.EdgeType;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import edu.uci.ics.jung.visualization.renderers.Renderer;
import org.apache.commons.collections15.Transformer;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Paint;
import java.awt.Stroke;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Jackson
 */
public class CombinatorialOptimization extends javax.swing.JFrame {

    private int[][] matrix;
    private int numOfVertex = 0;

    private Graph<Integer, String> graph;
    private Layout<Integer, String> layout;
    private VisualizationViewer<Integer, String> vv;

    /**
     * Creates new form CombinatorialOptimization
     */
    public CombinatorialOptimization() {
        initComponents();

        //Populate Graph object
        graph = new SparseMultigraph<>();

        //Initialize visualization
        layout = new CircleLayout(graph);
        layout.setSize(new Dimension(900, 430));

        vv = new VisualizationViewer<Integer, String>(layout);
        vv.setPreferredSize(new Dimension(900, 430));

        //Creates GraphMouse and adds to visualization
        DefaultModalGraphMouse gm = new DefaultModalGraphMouse();
        gm.setMode(ModalGraphMouse.Mode.TRANSFORMING);
        vv.setGraphMouse(gm);

        //Renders Vertex colors/labels
        vv.getRenderContext().setVertexFillPaintTransformer(new Transformer<Integer, Paint>() {
            public Paint transform(Integer i) {
                return Color.GREEN;
            }
        });
        vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller());
        vv.getRenderer().getVertexLabelRenderer().setPosition(Renderer.VertexLabel.Position.CNTR);

        //Renders Edge labels
        //Labels Edges
        vv.getRenderContext().setEdgeLabelTransformer(new Transformer<String, String>() {
            public String transform(String s) {
                return s.split(" : ")[1];
            }
        });

        this.jPanel2.add(vv);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btLoadData = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cbAlgorithm = new javax.swing.JComboBox<>();
        btHelp = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taOutput = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfSrc = new javax.swing.JTextField();
        tfDes = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btLoadData.setText("Load Data");
        btLoadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoadDataActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel1.setText("Select algorithm:");

        cbAlgorithm.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        cbAlgorithm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Only visualize graph", "1. Maximum Network Flow using Fordâ€“Fulkerson algorithm", "2. Shortest Path using Dijkstra algorithm", "3. Minimum Spanning Tree using Prim algorithm" }));
        cbAlgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAlgorithmActionPerformed(evt);
            }
        });

        btHelp.setText("?");
        btHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btHelpActionPerformed(evt);
            }
        });

        jPanel2.setLayout(new java.awt.BorderLayout());

        taOutput.setColumns(20);
        taOutput.setRows(1);
        taOutput.setText("[Program] Welcome to Combinatorial Optimization!\n\n");
        taOutput.setAlignmentX(0.0F);
        taOutput.setAlignmentY(0.0F);
        jScrollPane2.setViewportView(taOutput);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel2.setText("Src:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel3.setText("Des:");

        tfSrc.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfSrc.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tfSrcInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        tfDes.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btLoadData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfSrc, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfDes, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfSrc, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbAlgorithm, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btLoadData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btHelp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(tfDes, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btLoadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoadDataActionPerformed
        // TODO add your handling code here:

        JFileChooser jfc = new JFileChooser(System.getProperty("user.dir"));
        jfc.setDialogTitle("Select file data");
        if (jfc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            String pathFile = selectedFile.getAbsolutePath();
            //            System.out.println(pathFile);

            if (!readData(pathFile)) {
                JOptionPane.showMessageDialog(null,
                        "Problem when reading file: '" + pathFile + "'.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                updateGraph();
                change2default();

                taOutput.append("[Data] Loaded new data.\n");

                updateGraph();
            }
        }

    }//GEN-LAST:event_btLoadDataActionPerformed

    private void cbAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAlgorithmActionPerformed
        // TODO add your handling code here:
        switch (cbAlgorithm.getSelectedIndex()) {
            case 0:
                taOutput.append("\n\n[Program] Default visualize");

                updateGraph();
                change2default();

                break;
            case 1:
                try {
                    updateGraph();
                    change2default();

                    MaximumNetworkFlow mnf = new MaximumNetworkFlow(matrix);
                    int src = Integer.parseInt(tfSrc.getText());
                    int des = Integer.parseInt(tfDes.getText());

                    if (src >= 0 && des >= 0 && src < numOfVertex && des < numOfVertex) {

                        List<Integer> outputMnf = mnf.fordFulkerson(src, des);
                        taOutput.append("\n\n" + "[Fordâ€“Fulkerson algorithm] From " + src + " to " + des);
                        taOutput.append("\n" + "[Fordâ€“Fulkerson algorithm] Maximum value: " + outputMnf.get(0));
                        taOutput.append("\n" + "[Fordâ€“Fulkerson algorithm] Minimum cut:");

                        List<Integer> vertex2ChangeColor = new java.util.ArrayList<>();
                        List<String> edge2ChangeColor = new java.util.ArrayList<>();

                        for (int i = 1; i < outputMnf.size(); i += 2) {
                            taOutput.append("\n\t\t" + outputMnf.get(i) + " -- " + outputMnf.get(i + 1));

                            vertex2ChangeColor.add(outputMnf.get(i));
                            vertex2ChangeColor.add(outputMnf.get(i + 1));
                            edge2ChangeColor.add(Integer.toString(outputMnf.get(i)) + "_" + Integer.toString(outputMnf.get(i + 1)));
                        }
                        this.changeColorVertex(vertex2ChangeColor);
                        this.changeColorEdge(edge2ChangeColor);
                        this.changeStrokeEdge(edge2ChangeColor);

                    } else {
                        cbAlgorithm.setSelectedIndex(0);

                        JOptionPane.showMessageDialog(null,
                                "Please check your source and destination input.",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                    }

                } catch (Exception e) {
                    cbAlgorithm.setSelectedIndex(0);

                    JOptionPane.showMessageDialog(null,
                            "Please check your input data.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                }

                break;
            case 2:
                try {
                    updateGraph();
                    change2default();

                    ShortestPath sp = new ShortestPath(matrix);
                    int src = Integer.parseInt(tfSrc.getText());
                    int des = Integer.parseInt(tfDes.getText());

                    if (src >= 0 && des >= 0 && src < numOfVertex && des < numOfVertex) {

                        List<Integer> outputSt = sp.dijkstra(src, des);
                        taOutput.append("\n\n" + "[Dijkstra algorithm] From " + src + " to " + des);
                        taOutput.append("\n" + "[Dijkstra algorithm] Total value: " + outputSt.get(0));
                        taOutput.append("\n" + "[Dijkstra algorithm] Path:");

                        List<Integer> vertex2ChangeColor = new java.util.ArrayList<>();
                        List<String> edge2ChangeColor = new java.util.ArrayList<>();

//                        System.out.println(outputSt.toString());
                        for (int i = 1; i < outputSt.size() - 1; i++) {
                            taOutput.append("\n\t\t" + outputSt.get(i) + " -> " + outputSt.get(i + 1));

                            vertex2ChangeColor.add(outputSt.get(i));
                            vertex2ChangeColor.add(outputSt.get(i + 1));
                            edge2ChangeColor.add(Integer.toString(outputSt.get(i)) + "_" + Integer.toString(outputSt.get(i + 1)));
                        }
                        this.changeColorVertex(vertex2ChangeColor);
                        this.changeColorEdge(edge2ChangeColor);
                        this.changeStrokeEdge(edge2ChangeColor);

                    } else {
                        cbAlgorithm.setSelectedIndex(0);

                        JOptionPane.showMessageDialog(null,
                                "Please check your source and destination input.",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                    }

                } catch (Exception e) {
                    cbAlgorithm.setSelectedIndex(0);

                    JOptionPane.showMessageDialog(null,
                            "Please check your input data.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 3:
                try {
                    updateGraph();
                    change2default();

                    MinimumSpanningTree mnf = new MinimumSpanningTree(matrix);
                    int src = Integer.parseInt(tfSrc.getText());
                    int des = Integer.parseInt(tfDes.getText());

                    if (src >= 0 && des >= 0 && src < numOfVertex && des < numOfVertex) {

                        List<Integer> outputMnf = mnf.prim();
                        taOutput.append("\n\n" + "[Prim algorithm] From " + src + " to " + des);
                        taOutput.append("\n" + "[Prim algorithm] Total weight: " + outputMnf.get(0));
                        taOutput.append("\n" + "[Prim algorithm] Predict:");

                        List<Integer> vertex2ChangeColor = new java.util.ArrayList<>();
                        List<String> edge2ChangeColor = new java.util.ArrayList<>();

                        for (int i = 1; i < outputMnf.size(); i += 2) {
                            taOutput.append("\n\t\t" + outputMnf.get(i) + " -- " + outputMnf.get(i + 1));

                            vertex2ChangeColor.add(outputMnf.get(i));
                            vertex2ChangeColor.add(outputMnf.get(i + 1));
                            edge2ChangeColor.add(Integer.toString(outputMnf.get(i)) + "_" + Integer.toString(outputMnf.get(i + 1)));
                        }
                        this.changeColorVertex(vertex2ChangeColor);
                        this.changeColorEdge(edge2ChangeColor);
                        this.changeStrokeEdge(edge2ChangeColor);

                    } else {
                        cbAlgorithm.setSelectedIndex(0);

                        JOptionPane.showMessageDialog(null,
                                "Please check your source and destination input.",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                    }

                } catch (Exception e) {
                    cbAlgorithm.setSelectedIndex(0);

                    JOptionPane.showMessageDialog(null,
                            "Please check your input data.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                }

                break;
        }
    }//GEN-LAST:event_cbAlgorithmActionPerformed

    private void btHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHelpActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null,
                "None",
                "Help",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btHelpActionPerformed

    private void tfSrcInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tfSrcInputMethodTextChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_tfSrcInputMethodTextChanged

    private void changeColorEdge(List<String> edge) {
        vv.getRenderContext().setEdgeDrawPaintTransformer(new Transformer<String, Paint>() {
            public Paint transform(String s) {
                if (edge.contains(s.split(" : ")[0])) {
                    return Color.RED;
                }
                return Color.BLACK;
            }
        });
        vv.repaint();
    }

    private void changeStrokeEdge(List<String> edge) {
        final Stroke edgeStroke = new BasicStroke(3.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10.0f);
        Transformer<String, Stroke> edgeStrokeTransformer = new Transformer<String, Stroke>() {
            public Stroke transform(String s) {
                if (edge.contains(s.split(" : ")[0])) {
                    return edgeStroke;
                }
                return null;
            }
        };
        vv.getRenderContext().setEdgeStrokeTransformer(edgeStrokeTransformer);
        vv.repaint();
    }

    private void changeColorVertex(List<Integer> vertex) {
        vv.getRenderContext().setVertexFillPaintTransformer(new Transformer<Integer, Paint>() {
            public Paint transform(Integer i) {
                if (vertex.contains(i)) {
                    return Color.RED;
                }
                return Color.GREEN;
            }
        });
        vv.repaint();
    }

    private void change2default() {
        vv.getRenderContext().setVertexFillPaintTransformer(new Transformer<Integer, Paint>() {
            public Paint transform(Integer i) {
                return Color.GREEN;
            }
        });

        final Stroke edgeStroke = new BasicStroke(1.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10.0f);
        Transformer<String, Stroke> edgeStrokeTransformer = new Transformer<String, Stroke>() {
            public Stroke transform(String s) {
                return edgeStroke;
            }
        };
        vv.getRenderContext().setEdgeStrokeTransformer(edgeStrokeTransformer);

        vv.getRenderContext().setEdgeDrawPaintTransformer(new Transformer<String, Paint>() {
            public Paint transform(String s) {
                return Color.BLACK;
            }
        });
        vv.repaint();

    }

    private void updateDataJUNGGraph() {
        for (int i = 0; i < numOfVertex; i++) {
            graph.addVertex(i);
            for (int j = 0; j < numOfVertex; j++) {
                try {
                    if (matrix[i][j] > 0) {
                        graph.addEdge((Integer.toString(i) + "_" + Integer.toString(j) + " : " + Integer.toString(matrix[i][j])), i, j, EdgeType.DIRECTED);
                    }
                } catch (Exception e) {

                }
            }
        }

//        System.out.println(graph.toString());
    }

    private void updateGraph() {
        updateDataJUNGGraph();

        layout = new CircleLayout(graph);
        layout.setSize(new Dimension(900, 480));
        vv.setGraphLayout(layout);

        vv.repaint();
    }

    private boolean readData(String pathFile) {
        boolean error = false;
        try {

            FileReader reader = new FileReader(pathFile);
            Scanner fileIn = new Scanner(reader);

            for (int i = 0; i < numOfVertex; i++) {
                graph.removeVertex(i);
            }

            numOfVertex = Integer.parseInt(fileIn.nextLine());
            
            matrix = new int[numOfVertex][numOfVertex];

            for (int i = 0; i < numOfVertex; i++) {
                String line = fileIn.nextLine();
                try {

                    String[] tmp = line.split(" ");

                    for (int j = 0; j < numOfVertex; j++) {
                        matrix[i][j] = Integer.parseInt(tmp[j]);
                    }

                } catch (Exception e) {
                    error = true;
                    System.out.println(e);
                }
            }

            fileIn.close();
            reader.close();

            tfSrc.setText("0");
//            tfDes.setText(Integer.toString(numOfVertex - 1));
        } catch (IOException e) {
            System.out.println(e);
            error = true;
        }
        return (!error);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CombinatorialOptimization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CombinatorialOptimization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CombinatorialOptimization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CombinatorialOptimization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CombinatorialOptimization mainGui = new CombinatorialOptimization();

                mainGui.setLocationRelativeTo(null);
                mainGui.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btHelp;
    private javax.swing.JButton btLoadData;
    private javax.swing.JComboBox<String> cbAlgorithm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea taOutput;
    private javax.swing.JTextField tfDes;
    private javax.swing.JTextField tfSrc;
    // End of variables declaration//GEN-END:variables
}
